<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘翠LIUCUI</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dorid.top/"/>
  <updated>2018-07-31T11:09:12.477Z</updated>
  <id>http://dorid.top/</id>
  
  <author>
    <name>Yan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>滑稽大法</title>
    <link href="http://dorid.top/2018/07/31/%E6%BB%91%E7%A8%BD%E5%A4%A7%E6%B3%95/"/>
    <id>http://dorid.top/2018/07/31/滑稽大法/</id>
    <published>2018-07-31T11:02:40.000Z</published>
    <updated>2018-07-31T11:09:12.477Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="滑稽大法"><a href="#滑稽大法" class="headerlink" title="滑稽大法"></a>滑稽大法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LIUCUI</span><br><span class="line">滑稽已经替换成刘翠</span><br><span class="line">源地址：~/hexo/public/huaji/</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><a href="/huaji/">查看</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>IPTV直播源下载</title>
    <link href="http://dorid.top/2018/07/30/iptv/"/>
    <id>http://dorid.top/2018/07/30/iptv/</id>
    <published>2018-07-30T13:49:55.000Z</published>
    <updated>2018-07-31T11:23:14.217Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="iptv直播源"><a href="#iptv直播源" class="headerlink" title="iptv直播源"></a>iptv直播源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-央视超清蓝光台</span><br><span class="line">-卫视超清蓝光台</span><br><span class="line">-地方台</span><br><span class="line">-综艺</span><br><span class="line">-电影</span><br><span class="line">-电视剧</span><br><span class="line">-等</span><br></pre></td></tr></table></figure><p><a href="/ip/iptv直播.txt">点我下载</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="直播源" scheme="http://dorid.top/tags/%E7%9B%B4%E6%92%AD%E6%BA%90/"/>
    
      <category term="电视" scheme="http://dorid.top/tags/%E7%94%B5%E8%A7%86/"/>
    
  </entry>
  
  <entry>
    <title>百度</title>
    <link href="http://dorid.top/2018/07/30/%E7%99%BE%E5%BA%A6/"/>
    <id>http://dorid.top/2018/07/30/百度/</id>
    <published>2018-07-30T02:41:06.000Z</published>
    <updated>2018-07-30T02:41:07.047Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>哈哈哈</title>
    <link href="http://dorid.top/2018/07/30/%E5%93%88%E5%93%88%E5%93%88/"/>
    <id>http://dorid.top/2018/07/30/哈哈哈/</id>
    <published>2018-07-30T01:11:52.000Z</published>
    <updated>2018-07-30T01:11:52.177Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://dorid.top/2018/07/30/hello-world/"/>
    <id>http://dorid.top/2018/07/30/hello-world/</id>
    <published>2018-07-29T23:36:44.907Z</published>
    <updated>2018-07-29T23:36:44.907Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>404</title>
    <link href="http://dorid.top/2018/07/29/404/"/>
    <id>http://dorid.top/2018/07/29/404/</id>
    <published>2018-07-29T15:15:59.000Z</published>
    <updated>2018-07-30T01:22:27.977Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>###页面找不到了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>刘翠</title>
    <link href="http://dorid.top/2018/07/29/%E5%88%98%E7%BF%A0/"/>
    <id>http://dorid.top/2018/07/29/刘翠/</id>
    <published>2018-07-29T13:49:55.000Z</published>
    <updated>2018-07-30T01:22:27.977Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags"><a href="#tags" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-1"><a href="#tags-1" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-2"><a href="#tags-2" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-3"><a href="#tags-3" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-4"><a href="#tags-4" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-5"><a href="#tags-5" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-6"><a href="#tags-6" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-7"><a href="#tags-7" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-8"><a href="#tags-8" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-9"><a href="#tags-9" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-10"><a href="#tags-10" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-11"><a href="#tags-11" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-12"><a href="#tags-12" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-13"><a href="#tags-13" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-14"><a href="#tags-14" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-15"><a href="#tags-15" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-16"><a href="#tags-16" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-17"><a href="#tags-17" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-18"><a href="#tags-18" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-19"><a href="#tags-19" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-20"><a href="#tags-20" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-21"><a href="#tags-21" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-22"><a href="#tags-22" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-23"><a href="#tags-23" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-24"><a href="#tags-24" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-25"><a href="#tags-25" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-26"><a href="#tags-26" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-27"><a href="#tags-27" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-28"><a href="#tags-28" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-29"><a href="#tags-29" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-30"><a href="#tags-30" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-31"><a href="#tags-31" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-32"><a href="#tags-32" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-33"><a href="#tags-33" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-34"><a href="#tags-34" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-35"><a href="#tags-35" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-36"><a href="#tags-36" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-37"><a href="#tags-37" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-38"><a href="#tags-38" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-39"><a href="#tags-39" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-40"><a href="#tags-40" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-41"><a href="#tags-41" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-42"><a href="#tags-42" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-43"><a href="#tags-43" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-44"><a href="#tags-44" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-45"><a href="#tags-45" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-46"><a href="#tags-46" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-47"><a href="#tags-47" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-48"><a href="#tags-48" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-49"><a href="#tags-49" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-50"><a href="#tags-50" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-51"><a href="#tags-51" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-52"><a href="#tags-52" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-53"><a href="#tags-53" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-54"><a href="#tags-54" class="headerlink" title="tags:"></a>tags:</h2><hr><p>title: liucui<br>date: 2018-07-29 21:49:55</p><h2 id="tags-55"><a href="#tags-55" class="headerlink" title="tags:"></a>tags:</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>liucui</title>
    <link href="http://dorid.top/2018/07/29/liucui/"/>
    <id>http://dorid.top/2018/07/29/liucui/</id>
    <published>2018-07-29T13:49:55.000Z</published>
    <updated>2018-07-30T01:22:27.977Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WEBGL驱动的音乐展示器 - Azusa</title>
    <link href="http://dorid.top/2017/06/01/azusa/"/>
    <id>http://dorid.top/2017/06/01/azusa/</id>
    <published>2017-06-01T02:31:29.000Z</published>
    <updated>2018-07-30T01:22:27.977Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>懒！所以直接把 README 粘贴上来啦。<br>最近玩 osu 把手打断啦 qwq。</p></blockquote><p>项目 <a href="https://github.com/EYHN/Azusa" target="_blank" rel="noopener">github</a></p><h1 id="Azusa"><a href="#Azusa" class="headerlink" title="Azusa"></a>Azusa</h1><p><a href="https://delusion.coding.me" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/author-EYHN-blue.svg?style=flat-square" alt="Author"></a><a href="http://wpa.qq.com/msgrd?v=3&amp;uin=&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/QQ-1106996185-blue.svg?style=flat-square" alt="QQ"></a><a href=""><img src="https://img.shields.io/badge/Emali%20me-cneyhn@gmail.com-green.svg?style=flat-square" alt="Email"></a><a href="https://badge.fury.io/js/azusa" target="_blank" rel="noopener"><img src="https://badge.fury.io/js/azusa.svg" alt="npm version"></a></p><p><img src="/img/azusa/azusa.jpg" alt=""></p><p>A WEBGL Audio Spectrum Music Visualizer.</p><p><img src="/img/azusa/example.gif" alt=""></p><h1 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h1><ul><li><p>webpack</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install azusa --save</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import Azusa from &apos;azusa&apos;</span><br></pre></td></tr></table></figure></li></ul><h1 id="example"><a href="#example" class="headerlink" title="example"></a>example</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const azusa = new Azusa(&#123;</span><br><span class="line">  view: document.getElementById(&apos;app&apos;) as HTMLCanvasElement,</span><br><span class="line">  subdivisionSize: 1024,</span><br><span class="line">  cutEnd: 256</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">azusa.audio.load(testSound, undefined, (xhr: any) =&gt; &#123;</span><br><span class="line">  console.log((xhr.loaded / xhr.total * 100) + &apos;% loaded&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">azusa.audio.Volume = 0.5;</span><br><span class="line"></span><br><span class="line">window.addEventListener(&apos;resize&apos;, () =&gt; &#123;</span><br><span class="line">  azusa.resize(window.innerWidth, window.innerHeight);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><a href="https://eyhn.github.io/Azusa/example" target="_blank" rel="noopener">Click here to demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="发布" scheme="http://dorid.top/categories/%E5%8F%91%E5%B8%83/"/>
    
    
      <category term="技术" scheme="http://dorid.top/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="web" scheme="http://dorid.top/tags/web/"/>
    
      <category term="发布" scheme="http://dorid.top/tags/%E5%8F%91%E5%B8%83/"/>
    
  </entry>
  
  <entry>
    <title>js异步和网络Api发展史</title>
    <link href="http://dorid.top/2017/03/27/js%E5%BC%82%E6%AD%A5%E5%92%8C%E7%BD%91%E7%BB%9Capi%E5%8F%91%E5%B1%95%E5%8F%B2/"/>
    <id>http://dorid.top/2017/03/27/js异步和网络api发展史/</id>
    <published>2017-03-27T11:06:50.000Z</published>
    <updated>2018-07-30T01:49:03.797Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>从ajax到fetch，从回调到async，滑稽带你领略js异步和网络Api发展史。<br>仅仅是速览不会深入</p></blockquote><a id="more"></a><p>js是事件驱动的语言，单进程单线程。js主线程中有一个<code>Event Loop</code>（事件循环）。</p><h2 id="js运行顺序"><a href="#js运行顺序" class="headerlink" title="js运行顺序"></a>js运行顺序</h2><p>js先执行一遍所有js文件，然后进入<code>Event Loop</code>，等到有事件进入，就执行事件处理程序，执行完后再次回到<code>Event Loop</code>。</p><p>举个例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line"><span class="comment">//死循环</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果你在浏览器中运行，页面会卡死（在一些浏览器中仍可以滚动），因为js不执行完，浏览器不会做任何响应。</p></blockquote><p>上面的代码永远不会输出hello，因为<code>setTimeout(...,0)</code>，虽然是延时0ms，但还是会在下一个事件循环中被调用。</p><p>而后面的<code>while</code>循环是死循环，js引擎永远执行不完，所以不会进入事件循环的，也就永远执行不到<code>timeout</code>里的代码</p><p>更详细的介绍可在<a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="noopener">阮老师的博客</a>中看见。</p><h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><p>所以啥是异步呢？</p><p>我们先讲异步的反义词同步。</p><blockquote><p>同步就是在发出一个功能调用时，在没有得到结果之前，该调用就不返回。</p></blockquote><p>比如你发出一个网络请求请求一个数据，程序一直等待数据返回，不返回就不继续执行，这就是同步。</p><p>异步要智能得多。在网络请求没有返回之前程序还会继续执行。</p><p>延迟一秒在不同语言中同步、异步的不同写法:</p><p>JS 异步<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//输出 1 3 2</span></span><br></pre></td></tr></table></figure></p><p>Java 同步<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">System.out.print(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//延迟1000ms</span></span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">System.out.print(<span class="number">2</span>);</span><br><span class="line">System.out.print(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//输出 1 2 3</span></span><br></pre></td></tr></table></figure></p><p>显然<code>Java</code>的同步跟符合人类的思想，顺序执行非常简单。</p><p>但<code>JS</code>的优势也特别明显，在延迟时程序不会卡死，而是继续执行下去。</p><h2 id="回调（callback）"><a href="#回调（callback）" class="headerlink" title="回调（callback）"></a>回调（callback）</h2><p>回调是JS异步编程最常见的方式。</p><p><a href="https://www.zhihu.com/question/19801131" target="_blank" rel="noopener">回调函数（callback）是什么？(逼乎)</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setTimeout(callback,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>上面的<code>callback()</code>就作为回调函数，在1000ms后会被调用。</p><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><p>回到我们的主题，运用最广泛的网络api <code>ajax</code>就是以回调方式使用的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xmlhttp;</span><br><span class="line">xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">//定义回调函数</span></span><br><span class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果请求完成 且 返回状态码为200</span></span><br><span class="line"><span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//输出内容</span></span><br><span class="line"><span class="built_in">console</span>.log(xmlhttp.responseText);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"https://about.huaji8.top/links.json"</span>,<span class="literal">true</span><span class="comment">/*异步运行*/</span>);</span><br><span class="line"><span class="comment">//发送</span></span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure><blockquote><p>复制到浏览器<code>console</code>可以运行。</p></blockquote><blockquote><p><code>jquery</code>封装的ajax写法要比原版简单的多，对这是原版。</p></blockquote><blockquote><p>ajax也可以同步运行，只要将<code>XMLHttpRequest.open()</code>最后一个参数改成<code>false</code>，就是同步运行，执行<code>send()</code>后浏览器会卡住，直到请求返回。</p></blockquote><h2 id="Promise-（承诺）"><a href="#Promise-（承诺）" class="headerlink" title="Promise （承诺）"></a>Promise （承诺）</h2><p>Promise是一种更高级的回调接口。</p><blockquote><p>详细的介绍在这<a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noopener">ECMAScript 6 入门</a>，<code>Promise</code>的好处千千万，建议大家全部使用<code>Promise</code>，<code>jquery</code>的所有异步api也全部支持<code>Promise</code></p></blockquote><blockquote><p>ES6 原生支持 Promise ， 在不支持的浏览器上可以使用垫片库 <a href="https://github.com/stefanpenner/es6-promise" target="_blank" rel="noopener">es6-promise</a></p></blockquote><p>下面是一个将<code>setTimeout()</code>改造成<code>Promise</code>的例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回一个Promise 就可以无限then()啦 还可以用catch()捕获异常</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setTimeoutP</span>(<span class="params">ms</span>)</span>&#123;</span><br><span class="line"><span class="comment">//创建Promise 如果成功就调用resolve，失败就调用reject</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">setTimeout(resolve,ms);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setTimeoutP(<span class="number">1000</span>).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hello'</span>);</span><br><span class="line"><span class="comment">// 返回Promise 可以在then()中继续执行</span></span><br><span class="line"><span class="keyword">return</span> setTimeoutP(<span class="number">1000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'world'</span>);</span><br><span class="line"><span class="comment">// 返回数据 可以在then()中获取</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">r</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(r);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//一秒后输出Hello</span></span><br></pre></td></tr></table></figure><h2 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h2><p>fetch 是新的网络api 基于 Promise 设计。在旧的浏览器上可以使用 <a href="https://github.com/matthew-andrews/isomorphic-fetch" target="_blank" rel="noopener">isomorphic-fetch</a>，这个api是 node 和 浏览器环境通用的，实现同构应用必备的库。</p><blockquote><p>注：同构(isomorphic/universal)就是使前后端运行同一套代码的意思，后端一般是指 NodeJS 环境。</p></blockquote><p>范例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">"https://about.huaji8.top/links.json"</span>)</span><br><span class="line">.then(<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;<span class="keyword">return</span> e.json()&#125;)</span><br><span class="line">.then(<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;<span class="built_in">console</span>.log(e)&#125;);</span><br></pre></td></tr></table></figure></p><blockquote><p>尝试在浏览器<code>console</code>中运行</p></blockquote><h2 id="Generator-函数"><a href="#Generator-函数" class="headerlink" title="Generator 函数"></a>Generator 函数</h2><p><code>Generator 函数</code> 是 <code>ES6</code> 提供的语法，不过很快就被 <code>ES2017</code> 的 <code>async 函数</code> 代替，所以不多说了，感兴趣的可以看<a href="http://es6.ruanyifeng.com/?search=fetch&amp;x=0&amp;y=0#docs/generator" target="_blank" rel="noopener">ECMAScript 6 入门</a></p><blockquote><p>第一次看到 <code>Generator 函数</code> 是在 <code>unity</code> 中的协程，现在js也有这个语法了。</p></blockquote><h2 id="async-函数"><a href="#async-函数" class="headerlink" title="async 函数"></a>async 函数</h2><p>重头来了，这是目前最屌的写法，真正用同步的写法写异步程序。</p><blockquote><p>async 实际是 <code>Generator 函数</code> 的语法糖， <code>Generator</code> 才是技术</p></blockquote><p>我们继续拿上面建的 <code>setTimeoutP()</code> 举例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回一个Promise</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setTimeoutP</span>(<span class="params">ms</span>)</span>&#123;</span><br><span class="line"><span class="comment">//创建Promise 如果成功就调用resolve，失败就调用reject</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">setTimeout(resolve,ms);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncDelay</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// await可以拿到Promise的返回值</span></span><br><span class="line"><span class="keyword">let</span> O = <span class="keyword">await</span> fetch(<span class="string">"https://about.huaji8.top/links.json"</span>)</span><br><span class="line">.then(<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;<span class="keyword">return</span> e.json()&#125;)</span><br><span class="line"><span class="keyword">await</span> setTimeoutP(<span class="number">1000</span>)</span><br><span class="line"><span class="built_in">console</span>.log(O);</span><br><span class="line"><span class="comment">//一秒后输出 https://about.huaji8.top/links.json 内容</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncDelay();</span><br></pre></td></tr></table></figure><blockquote><p>尝试在浏览器<code>console</code>中运行</p></blockquote><h2 id="async-异常处理"><a href="#async-异常处理" class="headerlink" title="async 异常处理"></a>async 异常处理</h2><p><code>async</code> 可以以同步的方式编写异常处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncDelay</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">let</span> O = <span class="keyword">await</span> fetch(<span class="string">"https://about.huaji8.top/links.json"</span>)</span><br><span class="line">.then(<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;<span class="keyword">return</span> e.json()&#125;)</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line"><span class="comment">//输出异常</span></span><br><span class="line"><span class="built_in">console</span>.log(e)</span><br><span class="line">....</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">await</span> setTimeoutP(<span class="number">1000</span>)</span><br><span class="line"><span class="built_in">console</span>.log(O);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是不是超级方便呢。</p><p>关于<code>async</code>的更多信息，可以查看<a href="http://es6.ruanyifeng.com/#docs/async" target="_blank" rel="noopener">ECMAScript 6 入门</a>或<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction" target="_blank" rel="noopener">MDN</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;从ajax到fetch，从回调到async，滑稽带你领略js异步和网络Api发展史。&lt;br&gt;仅仅是速览不会深入&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="http://dorid.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://dorid.top/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="js" scheme="http://dorid.top/tags/js/"/>
    
      <category term="web" scheme="http://dorid.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>web动画框架的初步设计</title>
    <link href="http://dorid.top/2017/03/22/qq/"/>
    <id>http://dorid.top/2017/03/22/qq/</id>
    <published>2017-03-22T11:38:00.000Z</published>
    <updated>2018-07-30T01:22:27.957Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我希望有一天webApp能够达到原生应用的用户体验。</p><a id="more"></a><p><em>最后证实是重复造轮子，人家还比我造的好太多，大家都散了吧。 （ 让我哭一会</em><br><a href="https://github.com/berzniz/react-overdrive" target="_blank" rel="noopener">https://github.com/berzniz/react-overdrive</a></p><p><br></p><p><br></p><hr><blockquote><p>第一次写这么复杂的东西，我的语文水平我自己清楚，看不懂的可以直接到下面评论区夸我了。</p></blockquote><h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a><del>缘起</del></h2><p>我是怎么喜欢上material design的？ 多半是因为这张炫酷的图。</p><p><img src="/img/web动画框架的初步设计/炫酷ui.gif" alt=""></p><p>哇！炫酷！流畅！</p><p>我立即搜索material design的前端框架，发现没有一款可以实现这种效果的。</p><p>什么？？？？ 我大前端连区区一个动画都搞不定！！！</p><blockquote><p>codepen上的虽然有类似的特效，但从复用性，性能等方面考虑都没有能作为框架的。</p></blockquote><p>于是开始造轮之路。</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>初步实现的效果图：</p><p><img src="/img/web动画框架的初步设计/效果图.gif" alt=""></p><blockquote><p>效果可能不是很好，可能是因为没有调整动画曲线，不过这都是小问题。<br>源码需要重构，不好意思拿出来。感兴趣的话可以联系我。</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们将前面的炫酷ui可以分成两部分。</p><p><img src="/img/web动画框架的初步设计/分割.png" alt=""></p><p>上面这两个界面分开来的话，相信对各位前端大神都是小菜一碟的吧。</p><p>这个框架的思路就是用程序来自动补间。</p><p>我们在每个元素身上放个key。</p><p><img src="/img/web动画框架的初步设计/key.png" alt=""></p><p>先记录下所有被标记的元素的位置。</p><p>页面改变后将其自动补间到新的位置。包括高度宽度等css属性。</p><p>嗯，但这个补间怎么做？<code>js</code>？<code>css transition</code>？</p><p>显然<code>css transition</code>是更高效的选择，要使用<code>css transition</code>的前提就是页面的转换不能破坏这个元素。</p><p>现有路由库如：<code>react-router</code>等，都是删掉原来的元素，填入新的元素，所以<code>css transition</code>是行不通的。</p><p>然而我选了一种特别极端的方法，添加一个布局层。</p><h2 id="布局层"><a href="#布局层" class="headerlink" title="布局层"></a>布局层</h2><p><img src="/img/web动画框架的初步设计/float.png" alt=""></p><p>上图红色部分就是布局层，布局层没有显示，没有动画，由路由负责管理。</p><p>图片中有内容的元素是绝对定位的，存在在布局层之上，不受路由管理，称为<code>Plane</code>(面)。</p><p>用程序把<code>Plane</code>放在对应的布局层之上，设置高度宽度，加上<code>css transition</code>。当布局层发送改变时，刷新<code>Plane</code>的位置，高度，宽度，内容。这个过程中<code>Plane</code>是不会被重建的于是<code>css transition</code>就产生了补间动画。</p><blockquote><p>得益于react的 vdom 和 jsx 我们可以按正常的方式写元素，然后把他们渲染在其他地方。</p></blockquote><hr><p>再说下<a href="https://themes.materializecss.com/pages/demo#0" target="_blank" rel="noopener">这个站</a></p><p>这个站也有布局转换的过渡效果。</p><p><img src="/img/web动画框架的初步设计/垃圾1.png" alt=""><img src="/img/web动画框架的初步设计/垃圾2.png" alt=""></p><p>可以看到布局变化后，原来的元素并没有被清理，codepen上许多方案也有这种缺陷，页面一多，就会有很多元素，肯定不行。</p><p>这篇文章的方法会真正释放掉旧的元素，也算个优点。</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>如果你有更好的方法欢迎与我讨论。</p><p><span style="font-size:12px;color:#888">封面画师: <a href="http://www.pixiv.net/member.php?id=3376987" target="_blank" rel="noopener">秋月</a></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我希望有一天webApp能够达到原生应用的用户体验。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://dorid.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://dorid.top/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="js" scheme="http://dorid.top/tags/js/"/>
    
      <category term="html" scheme="http://dorid.top/tags/html/"/>
    
      <category term="开源" scheme="http://dorid.top/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>web动画框架的初步设计</title>
    <link href="http://dorid.top/2017/03/22/web%E5%8A%A8%E7%94%BB%E6%A1%86%E6%9E%B6%E7%9A%84%E5%88%9D%E6%AD%A5%E8%AE%BE%E8%AE%A1/"/>
    <id>http://dorid.top/2017/03/22/web动画框架的初步设计/</id>
    <published>2017-03-22T11:38:00.000Z</published>
    <updated>2018-07-30T01:49:03.797Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我希望有一天webApp能够达到原生应用的用户体验。</p><a id="more"></a><p><em>最后证实是重复造轮子，人家还比我造的好太多，大家都散了吧。 （ 让我哭一会</em><br><a href="https://github.com/berzniz/react-overdrive" target="_blank" rel="noopener">https://github.com/berzniz/react-overdrive</a></p><p><br></p><p><br></p><hr><blockquote><p>第一次写这么复杂的东西，我的语文水平我自己清楚，看不懂的可以直接到下面评论区夸我了。</p></blockquote><h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a><del>缘起</del></h2><p>我是怎么喜欢上material design的？ 多半是因为这张炫酷的图。</p><p><img src="/img/web动画框架的初步设计/炫酷ui.gif" alt=""></p><p>哇！炫酷！流畅！</p><p>我立即搜索material design的前端框架，发现没有一款可以实现这种效果的。</p><p>什么？？？？ 我大前端连区区一个动画都搞不定！！！</p><blockquote><p>codepen上的虽然有类似的特效，但从复用性，性能等方面考虑都没有能作为框架的。</p></blockquote><p>于是开始造轮之路。</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>初步实现的效果图：</p><p><img src="/img/web动画框架的初步设计/效果图.gif" alt=""></p><blockquote><p>效果可能不是很好，可能是因为没有调整动画曲线，不过这都是小问题。<br>源码需要重构，不好意思拿出来。感兴趣的话可以联系我。</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们将前面的炫酷ui可以分成两部分。</p><p><img src="/img/web动画框架的初步设计/分割.png" alt=""></p><p>上面这两个界面分开来的话，相信对各位前端大神都是小菜一碟的吧。</p><p>这个框架的思路就是用程序来自动补间。</p><p>我们在每个元素身上放个key。</p><p><img src="/img/web动画框架的初步设计/key.png" alt=""></p><p>先记录下所有被标记的元素的位置。</p><p>页面改变后将其自动补间到新的位置。包括高度宽度等css属性。</p><p>嗯，但这个补间怎么做？<code>js</code>？<code>css transition</code>？</p><p>显然<code>css transition</code>是更高效的选择，要使用<code>css transition</code>的前提就是页面的转换不能破坏这个元素。</p><p>现有路由库如：<code>react-router</code>等，都是删掉原来的元素，填入新的元素，所以<code>css transition</code>是行不通的。</p><p>然而我选了一种特别极端的方法，添加一个布局层。</p><h2 id="布局层"><a href="#布局层" class="headerlink" title="布局层"></a>布局层</h2><p><img src="/img/web动画框架的初步设计/float.png" alt=""></p><p>上图红色部分就是布局层，布局层没有显示，没有动画，由路由负责管理。</p><p>图片中有内容的元素是绝对定位的，存在在布局层之上，不受路由管理，称为<code>Plane</code>(面)。</p><p>用程序把<code>Plane</code>放在对应的布局层之上，设置高度宽度，加上<code>css transition</code>。当布局层发送改变时，刷新<code>Plane</code>的位置，高度，宽度，内容。这个过程中<code>Plane</code>是不会被重建的于是<code>css transition</code>就产生了补间动画。</p><blockquote><p>得益于react的 vdom 和 jsx 我们可以按正常的方式写元素，然后把他们渲染在其他地方。</p></blockquote><hr><p>再说下<a href="https://themes.materializecss.com/pages/demo#0" target="_blank" rel="noopener">这个站</a></p><p>这个站也有布局转换的过渡效果。</p><p><img src="/img/web动画框架的初步设计/垃圾1.png" alt=""><img src="/img/web动画框架的初步设计/垃圾2.png" alt=""></p><p>可以看到布局变化后，原来的元素并没有被清理，codepen上许多方案也有这种缺陷，页面一多，就会有很多元素，肯定不行。</p><p>这篇文章的方法会真正释放掉旧的元素，也算个优点。</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>如果你有更好的方法欢迎与我讨论。</p><p><span style="font-size:12px;color:#888">封面画师: <a href="http://www.pixiv.net/member.php?id=3376987" target="_blank" rel="noopener">秋月</a></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我希望有一天webApp能够达到原生应用的用户体验。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://dorid.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://dorid.top/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="js" scheme="http://dorid.top/tags/js/"/>
    
      <category term="html" scheme="http://dorid.top/tags/html/"/>
    
      <category term="开源" scheme="http://dorid.top/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>js获取元素绝对位置</title>
    <link href="http://dorid.top/2017/03/20/js%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0%E7%BB%9D%E5%AF%B9%E4%BD%8D%E7%BD%AE/"/>
    <id>http://dorid.top/2017/03/20/js获取元素绝对位置/</id>
    <published>2017-03-20T11:30:50.000Z</published>
    <updated>2018-07-30T01:49:03.797Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>众：哇！不会吧！博主你这都不会！</p><p>我：我…我还真的不会。</p><a id="more"></a><p>今天搞事情想搞个react动画框架。需要获取元素的绝对位置。</p><p>百度： <span style="font-size:12px;color:#888">不要和我说google 一样的货色</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取元素的纵坐标 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTop</span>(<span class="params">e</span>)</span>&#123; </span><br><span class="line">  <span class="keyword">var</span> offset=e.offsetTop; </span><br><span class="line">  <span class="keyword">if</span>(e.offsetParent!=<span class="literal">null</span>) offset+=getTop(e.offsetParent); </span><br><span class="line">  <span class="keyword">return</span> offset; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//获取元素的横坐标 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLeft</span>(<span class="params">e</span>)</span>&#123; </span><br><span class="line">  <span class="keyword">var</span> offset=e.offsetLeft; </span><br><span class="line">  <span class="keyword">if</span>(e.offsetParent!=<span class="literal">null</span>) offset+=getLeft(e.offsetParent); </span><br><span class="line">  <span class="keyword">return</span> offset; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗯 很合理嘛 Element.offsetTop + 递归。</p><p>可偶然发现这是获取元素在文档流中的位置，但 transform 属性是不会改变文档流中的位置的。好，我们换一个方法。结果百度 google翻了几页都是这一个方法</p><p><img src="/img/表情/喷.png" alt=""></p><p>继续寻找，突然想到jq，试了一下jq的offset方法，完美支持 transform 属性，mmp。</p><p>经查看jq源码，方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">offset: <span class="function"><span class="keyword">function</span>(<span class="params"> options </span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Preserve chaining for setter</span></span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">arguments</span>.length ) &#123;</span><br><span class="line">    <span class="keyword">return</span> options === <span class="literal">undefined</span> ?</span><br><span class="line">      <span class="keyword">this</span> :</span><br><span class="line">      <span class="keyword">this</span>.each( <span class="function"><span class="keyword">function</span>(<span class="params"> i </span>) </span>&#123;</span><br><span class="line">        jQuery.offset.setOffset( <span class="keyword">this</span>, options, i );</span><br><span class="line">      &#125; );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> doc, docElem, rect, win,</span><br><span class="line">    elem = <span class="keyword">this</span>[ <span class="number">0</span> ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !elem ) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Return zeros for disconnected and hidden (display: none) elements (gh-2310)</span></span><br><span class="line">  <span class="comment">// Support: IE &lt;=11 only</span></span><br><span class="line">  <span class="comment">// Running getBoundingClientRect on a</span></span><br><span class="line">  <span class="comment">// disconnected node in IE throws an error</span></span><br><span class="line">  <span class="keyword">if</span> ( !elem.getClientRects().length ) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">top</span>: <span class="number">0</span>, <span class="attr">left</span>: <span class="number">0</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  rect = elem.getBoundingClientRect();</span><br><span class="line"></span><br><span class="line">  doc = elem.ownerDocument;</span><br><span class="line">  docElem = doc.documentElement;</span><br><span class="line">  win = doc.defaultView;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    top: rect.top + win.pageYOffset - docElem.clientTop,</span><br><span class="line">    left: rect.left + win.pageXOffset - docElem.clientLeft</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查阅mdn的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Range/getBoundingClientRect" target="_blank" rel="noopener">getBoundingClientRect()</a> 词条。</p><blockquote><p>Range.getBoundingClientRect() 返回一个 ClientRect 对象，该对象限定了选定的文档对象的内容，该方法返回了一个矩形，这个矩形包围了该文档对象中所有元素的边界矩形集合（译者注：关于边界矩形可以参考 <a href="http://en.wikipedia.org/wiki/Minimum_bounding_rectangle" target="_blank" rel="noopener">Minimum Bouding Rectangles</a>）。 </p></blockquote><p>以及 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getClientRects#Syntax" target="_blank" rel="noopener">getClientRects()</a></p><blockquote><p>返回值是ClientRect对象集合，该对象是与该元素相关的CSS边框。每个ClientRect对象包含一组描述该边框的只读属性——left、top、right和bottom，单位为像素，<strong>这些属性值是相对于视口的top-left的。</strong>即使当表格的标题在表格的边框外面，该标题仍会被计算在内。</p></blockquote><p>注意上文的 <code>这些属性值是相对于视口的top-left的。</code> 也就是说算出元素在页面的绝对位置还有加上视口滚动的距离。</p><p>所以jq的实现就是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  top: 元素顶部到视口顶部 + 视口到页面顶部 - 文档偏移</span><br><span class="line">  left: 元素左侧到视口左侧 + 视口到页面左侧 - 文档偏移</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span style="font-size:12px;color:#888">封面画师: <a href="http://www.pixiv.net/member.php?id=3273478" target="_blank" rel="noopener">squidsmith</a></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众：哇！不会吧！博主你这都不会！&lt;/p&gt;
&lt;p&gt;我：我…我还真的不会。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://dorid.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://dorid.top/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="js" scheme="http://dorid.top/tags/js/"/>
    
      <category term="html" scheme="http://dorid.top/tags/html/"/>
    
  </entry>
  
</feed>
